
// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
class AttractionsFilter {
    constructor() {
        this.cards = [];
        this.currentFilter = 'all';
        this.searchTerm = '';
        this.init();
    }

    init() {
        this.cards = Array.from(document.querySelectorAll('.content-card'));
        this.bindEvents();
        this.setupSearch();
    }

    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('filter-btn')) {
                this.handleFilterClick(e.target);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.handleSearch(e.target.value.toLowerCase());
                }, 300); // Debounce –Ω–∞ 300ms
            });
        }
    }

    setupSearch() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('focus', () => {
                searchInput.parentElement.classList.add('focused');
            });

            searchInput.addEventListener('blur', () => {
                searchInput.parentElement.classList.remove('focused');
            });
        }
    }

    handleFilterClick(button) {
        // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
        button.classList.add('active');

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∏–ª—å—Ç—Ä–∞
        this.currentFilter = button.dataset.category;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        this.applyFilters();

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–µ
        this.animateButton(button);
    }

    handleSearch(searchTerm) {
        this.searchTerm = searchTerm;
        this.applyFilters();
    }

    applyFilters() {
        let visibleCount = 0;

        this.cards.forEach((card, index) => {
            const category = card.dataset.category;
            const title = card.querySelector('h3').textContent.toLowerCase();
            const description = card.querySelector('p').textContent.toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryMatch = this.currentFilter === 'all' || category === this.currentFilter;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            const searchMatch = this.searchTerm === '' || 
                               title.includes(this.searchTerm) || 
                               description.includes(this.searchTerm);

            const shouldShow = categoryMatch && searchMatch;

            if (shouldShow) {
                this.showCard(card, visibleCount * 100);
                visibleCount++;
            } else {
                this.hideCard(card);
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        this.toggleEmptyMessage(visibleCount === 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        this.updateResultsCounter(visibleCount);
    }

    showCard(card, delay = 0) {
        setTimeout(() => {
            card.style.display = 'block';
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px) scale(0.95)';
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            card.offsetHeight;
            
            card.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0) scale(1)';
        }, delay);
    }

    hideCard(card) {
        card.style.transition = 'all 0.3s ease';
        card.style.opacity = '0';
        card.style.transform = 'translateY(-20px) scale(0.95)';
        
        setTimeout(() => {
            card.style.display = 'none';
        }, 300);
    }

    animateButton(button) {
        button.style.transform = 'scale(0.95)';
        setTimeout(() => {
            button.style.transform = 'scale(1)';
        }, 150);
    }

    toggleEmptyMessage(show) {
        let emptyMessage = document.getElementById('empty-message');
        
        if (show && !emptyMessage) {
            emptyMessage = document.createElement('div');
            emptyMessage.id = 'empty-message';
            emptyMessage.className = 'empty-message';
            emptyMessage.innerHTML = `
                <div class="empty-content">
                    <div class="empty-icon">üîç</div>
                    <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
                    <button class="reset-filters-btn" onclick="attractionsFilter.resetFilters()">
                        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                    </button>
                </div>
            `;
            
            const grid = document.querySelector('.content-grid');
            grid.appendChild(emptyMessage);
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            setTimeout(() => {
                emptyMessage.classList.add('show');
            }, 100);
            
        } else if (!show && emptyMessage) {
            emptyMessage.classList.remove('show');
            setTimeout(() => {
                if (emptyMessage.parentNode) {
                    emptyMessage.parentNode.removeChild(emptyMessage);
                }
            }, 300);
        }
    }

    updateResultsCounter(count) {
        let counter = document.getElementById('results-counter');
        
        if (!counter) {
            counter = document.createElement('div');
            counter.id = 'results-counter';
            counter.className = 'results-counter';
            
            const filtersSection = document.querySelector('.filters-section');
            filtersSection.appendChild(counter);
        }

        const totalCards = this.cards.length;
        
        if (this.currentFilter === 'all' && this.searchTerm === '') {
            counter.style.display = 'none';
        } else {
            counter.style.display = 'block';
            counter.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${count} –∏–∑ ${totalCards}`;
        }
    }

    resetFilters() {
        // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.currentFilter = 'all';
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector('.filter-btn[data-category="all"]').classList.add('active');

        // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        this.searchTerm = '';
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.value = '';
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        this.applyFilters();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
    filterByCategory(category) {
        const button = document.querySelector(`[data-category="${category}"]`);
        if (button) {
            this.handleFilterClick(button);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    search(term) {
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.value = term;
            this.handleSearch(term.toLowerCase());
        }
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const filterStyles = `
    .search-box.focused {
        transform: scale(1.02);
    }
    
    .results-counter {
        background: rgba(111, 163, 91, 0.1);
        color: #4a7c59;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
        display: inline-block;
        border: 1px solid rgba(111, 163, 91, 0.2);
    }
    
    .empty-message {
        grid-column: 1 / -1;
        text-align: center;
        padding: 3rem 1rem;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease;
    }
    
    .empty-message.show {
        opacity: 1;
        transform: translateY(0);
    }
    
    .empty-content {
        max-width: 400px;
        margin: 0 auto;
    }
    
    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
    
    .empty-content h3 {
        color: #4a7c59;
        margin-bottom: 0.5rem;
        font-size: 1.5rem;
    }
    
    .empty-content p {
        color: #666;
        margin-bottom: 2rem;
        line-height: 1.6;
    }
    
    .reset-filters-btn {
        background: linear-gradient(135deg, #6fa35b, #4a7c59);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 20px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .reset-filters-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(111, 163, 91, 0.4);
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
    .content-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    .content-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 15px 35px rgba(45, 90, 61, 0.2);
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    @media (max-width: 768px) {
        .filters-section {
            gap: 1rem;
        }
        
        .search-box {
            max-width: 100%;
        }
        
        .filter-buttons {
            gap: 0.25rem;
        }
        
        .empty-content {
            padding: 1rem;
        }
        
        .empty-icon {
            font-size: 3rem;
        }
    }
`;

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
const filterStyleSheet = document.createElement('style');
filterStyleSheet.textContent = filterStyles;
document.head.appendChild(filterStyleSheet);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–ª—å—Ç—Ä—É
let attractionsFilter;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    if (document.querySelector('.content-grid')) {
        attractionsFilter = new AttractionsFilter();
    }
});

// –£–ª—É—á—à–µ–Ω–∏–µ hover —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.content-card');
    
    cards.forEach(card => {
        card.addEventListener('mouseenter', () => {
            card.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        });
        
        card.addEventListener('mouseleave', () => {
            card.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
        });
    });
});
